generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  USER
  ADMIN
}

enum ORDER_STATUS {
  INITIATED
  PROCESSED
  SHIPPED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  username  String
  role      ROLE     @default(USER)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  movieId   String
  movie     TitleAkas    @relation(fields: [movieId], references: [titleId])
  quantity  Int
  status    ORDER_STATUS @default(INITIATED)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model TitleAkas {
  titleId           String          @id @default(uuid())
  ordering          Int
  title             String          @db.VarChar(255)
  region            String          @db.VarChar(255)
  language          String          @db.VarChar(255)
  types             String[]        @db.VarChar(255)
  attributes        String[]        @db.VarChar(255)
  isOriginalTitle   Boolean         @default(false)
  quantityAvailable Int             @default(1)
  titleBasic        TitleBasic?
  titleCrew         TitleCrew?
  titleEpisode      TitleEpisode?
  titlePrincipal    TitlePrincipal?
  titleRatings      TitleRating?
  orders            Order[]
}

model NameBasic {
  nconst            String          @id @unique @default(uuid())
  primaryName       String          @db.VarChar(255)
  birthYear         String          @db.VarChar(255)
  deathYear         String?         @db.VarChar(255)
  primaryProfession String[]        @db.VarChar(255)
  knownForTitles    String[]        @db.VarChar(255)
  titlePrincipal    TitlePrincipal?
  directors         TitleCrew[]
}

model TitleBasic {
  id             String    @id @default(uuid())
  tconst         String    @unique
  titleAkas      TitleAkas @relation(fields: [tconst], references: [titleId], onDelete: NoAction, onUpdate: NoAction)
  titleType      String    @db.VarChar(255)
  primaryTitle   String    @db.VarChar(255)
  originalTitle  String    @db.VarChar(255)
  isAdult        Boolean   @default(false)
  startYear      String    @db.VarChar(255)
  endYear        String    @db.VarChar(255)
  runtimeMinutes Int
  genres         String[]  @db.VarChar(255)
}

model TitleCrew {
  id        String      @id @default(uuid())
  tconst    String      @unique
  titleAkas TitleAkas   @relation(fields: [tconst], references: [titleId], onDelete: NoAction, onUpdate: NoAction)
  directors NameBasic[]
}

model TitleEpisode {
  id            String    @id @default(uuid())
  tconst        String    @unique
  titleAkas     TitleAkas @relation(fields: [tconst], references: [titleId], onDelete: NoAction, onUpdate: NoAction)
  parentTconst  String    @db.VarChar(255)
  seasonNumber  Int
  episodeNumber Int
}

model TitlePrincipal {
  id         String    @id @default(uuid())
  tconst     String    @unique
  titleAkas  TitleAkas @relation(fields: [tconst], references: [titleId], onDelete: NoAction, onUpdate: NoAction)
  ordering   Int       @default(autoincrement())
  nconst     String    @unique
  nameBasics NameBasic @relation(fields: [nconst], references: [nconst], onDelete: NoAction, onUpdate: NoAction)
  category   String    @db.VarChar(255)
  job        String    @db.VarChar(255)
  characters String    @db.VarChar(255)
}

model TitleRating {
  id            String    @id @default(uuid())
  tconst        String    @unique
  titleAkas     TitleAkas @relation(fields: [tconst], references: [titleId], onDelete: NoAction, onUpdate: NoAction)
  averageRating Float
  numVotes      Int
}

// model MovieDirector {
//   id         String    @id @default(uuid())
//   directorId String
//   director   NameBasic @relation(fields: [directorId], references: [nconst])
//   movieId    String
//   movie      TitleCrew @relation(fields: [movieId], references: [tconst])
// }

// model MovieWriter {
//   id       String    @id @default(uuid())
//   writerId String
//   writer   NameBasic @relation(fields: [writerId], references: [nconst])
//   movieId  String
//   movie    TitleCrew @relation(fields: [movieId], references: [tconst])
// }
